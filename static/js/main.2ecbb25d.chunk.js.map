{"version":3,"sources":["components/Header.js","components/Card.js","components/Cards.js","components/CountriesList.js","components/LineChart.js","components/BarChart.js","components/Chart.js","components/App.js","index.js","img/logo.png"],"names":["header","logo","Header","css","src","logoImg","alt","card","Card","title","count","date","description","styleColor","time","moment","tz","format","start","end","duration","delay","cards","Cards","data","confirmed","deaths","recovered","lastUpdate","value","styleCountries","selectList","selectStyles","container","provided","flexBasis","color","menu","backgroundColor","singleValue","fontSize","input","control","indicatorsContainer","option","placeholder","CountriesList","handleOnChangeCountry","useState","label","countries","setCountries","useEffect","a","axios","get","response","countriesNames","map","name","fetchCountries","styles","defaultValue","options","onChange","LineChart","dailyData","setDailyData","processData","reportDate","fetchDailyData","labels","length","datasets","borderColor","fill","borderWidth","total","legend","fontColor","tooltips","bodyFontSize","xPadding","yPadding","responsive","scales","xAxes","ticks","gridLines","zeroLineColor","yAxes","BarChart","display","text","chart","Chart","country","loader","globalStyles","App","setData","setCountry","loading","setLoading","url","fetchData","type","height","width","selectedCountry","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.2ecbb25d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { css } from '@emotion/core';\r\nimport logoImg from '../img/logo.png';\r\n\r\nconst header = css({\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    gridArea: 'header',\r\n    width: '100%',\r\n    padding: 3,\r\n    '@media (min-width: 768px)':{\r\n\t\tpadding: 8\r\n    }\r\n});\r\n\r\nconst logo = css({\r\n    filter: 'invert(100%)'\r\n});\r\n\r\nconst Header = () => (\r\n    <header css={header}>\r\n        <img src={logoImg} alt=\"covid19\" css={logo}/>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import React from 'react';\r\nimport { css } from '@emotion/core';\r\nimport CountUp from 'react-countup';\r\nimport moment from 'moment-timezone';\r\nimport 'moment/locale/pl';\r\n\r\nconst card = css({\r\n    border: '1px solid #424242',\r\n    padding: 5,\r\n    borderRadius: 15,\r\n    width: '100%',\r\n    marginRight: 0,\r\n    textAlign: 'center',\r\n    p: {\r\n        fontSize: '1.2rem'\r\n    },\r\n    '@media (min-width: 768px)':{\r\n        flexBasis: '25%',\r\n        padding: 10,\r\n        marginRight: 10,\r\n        p: {\r\n            fontSize: '1rem'\r\n        }\r\n    }\r\n    \r\n});\r\n\r\nconst Card = ({ title, count, date, description, styleColor }) =>\r\n{\r\n\r\n    const time = moment(date).tz('Europe/Warsaw').format('D MMMM YYYY, kk:mm');\r\n    return (\r\n        <div css={css`\r\n            ${card};\r\n            border-bottom: 15px solid ${styleColor};\r\n        `}>\r\n            <h2>{title}</h2>\r\n            <h1><CountUp start={0} end={count} duration={2.75} delay={0.2}/></h1>\r\n            <p>{time}</p>\r\n            <p>{description}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\nimport { css } from '@emotion/core';\r\nimport Card from './Card';\r\n\r\nconst cards = css({\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    gridArea: 'cards',\r\n    width: '100%',\r\n    '@media (min-width: 768px)':{\r\n        flexDirection: 'row',\r\n    }\r\n});\r\n\r\nconst Cards = ({ data }) =>\r\n{\r\n    const { confirmed, deaths, recovered, lastUpdate } = data;\r\n    return (\r\n        confirmed && (<div css={cards}>\r\n            <Card title=\"Zachorowań\" date={lastUpdate} count={confirmed.value} styleColor=\"#d50000\" description=\"Liczba osób zarażonych koronawirusem\"/>\r\n            <Card title=\"Zgonów\" date={lastUpdate} count={deaths.value} styleColor=\"#4a148c\" description=\"Liczba osób zmarłych z powodu koronawirusa\"/>\r\n            <Card title=\"Wyzdrowień\" date={lastUpdate} count={recovered.value} styleColor=\"#43a047\" description=\"Liczba osób wyzdrowiałych z koronawirusa\"/>\r\n        </div>)\r\n    )\r\n};\r\n\r\nexport default Cards;","import React, { useState, useEffect } from 'react';\r\nimport { css } from '@emotion/core';\r\nimport Select from 'react-select';\r\nimport axios from 'axios';\r\n\r\nconst styleCountries = css({\r\n    gridArea: 'countries',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    width: '100%',\r\n});\r\n\r\nconst selectList = css({\r\n    width: '80%',\r\n    '@media (min-width: 768px)': {\r\n        width: '50%'\r\n    }\r\n});\r\n\r\nconst selectStyles = {\r\n    container: (provided) => ({\r\n        ...provided,\r\n        flexBasis: '100%',\r\n        color: '#fff'\r\n    }),\r\n    menu:(provided) => ({\r\n        ...provided,\r\n        flexBasis: '100%',\r\n        backgroundColor: '#616161',\r\n        '&:hover': {\r\n            backgroundColor: '#616161',\r\n        }\r\n    }), \r\n    singleValue: (provided) => ({\r\n        ...provided,\r\n        fontSize: '1.25rem',\r\n        color: '#fff'\r\n    }),\r\n    input: (provided) => ({\r\n        ...provided,\r\n        color: '#fff',\r\n        fontSize: '1.25rem'\r\n    }),\r\n    control: (provided) => ({\r\n        ...provided,\r\n        backgroundColor: '#616161'\r\n    }),\r\n    indicatorsContainer: (provided) => ({\r\n        ...provided,\r\n        'svg': {\r\n            color: '#fff'\r\n        }\r\n    }),\r\n    option: (provided) => ({\r\n        ...provided,\r\n        backgroundColor: '#616161',\r\n        fontSize: '1.2rem',\r\n        ':hover':\r\n        {\r\n            backgroundColor: '#757575'\r\n        }\r\n    }),\r\n    placeholder: (provided) => ({\r\n        ...provided,\r\n        color: '#eef',\r\n        fontSize: '1.25rem',\r\n    })\r\n\r\n\r\n};\r\n\r\nconst CountriesList = ({ handleOnChangeCountry }) =>\r\n{\r\n    const [countries, setCountries] = useState([{value: 'świat', label: 'Świat' }]);\r\n\r\n    useEffect(() => {\r\n        const fetchCountries = async () => {\r\n            const { data: { countries: response } } = await axios.get('https://covid19.mathdro.id/api/countries/');\r\n            const countriesNames = response.map(({ name }) => ({\r\n                value: name, label: name\r\n            }));\r\n            setCountries([...countries, ...countriesNames]);\r\n        };\r\n        fetchCountries();\r\n    }, [setCountries]);\r\n\r\n    return (\r\n        <div css={styleCountries}>\r\n            <div css={selectList}>\r\n                <Select styles={selectStyles} placeholder=\"Wybierz kraj\" defaultValue={countries[0]} options={countries} onChange={handleOnChangeCountry}/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CountriesList;","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nconst LineChart = () => {\r\n    const [dailyData, setDailyData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchDailyData = async () =>\r\n        {\r\n            const { data } = await axios.get('https://covid19.mathdro.id/api/daily');\r\n            const processData = data.map(({ confirmed, deaths, reportDate }) => ({ confirmed, deaths, reportDate }));\r\n            setDailyData(processData);\r\n        };\r\n        fetchDailyData();\r\n    }, [setDailyData])\r\n\r\n    const labels = dailyData.map(({ reportDate }) => reportDate);\r\n    const options = {\r\n        legend: {\r\n            labels: {\r\n                fontColor: '#fff',\r\n                fontSize: 16\r\n            }\r\n        },\r\n        tooltips: {\r\n            bodyFontSize: 16,\r\n            xPadding: 15,\r\n            yPadding: 10\r\n        },\r\n        responsive: true,\r\n        scales: {\r\n\t\tbackgroundColor: '#121212',\r\n           xAxes: [\r\n                { \r\n                   ticks: { fontColor: 'rgb(255,255,255)', fontSize: 14} ,\r\n                   gridLines: { \r\n                       color: 'rgb(255,255,255, 0.2)',\r\n                       zeroLineColor: 'rgb(255,255,255)'\r\n                    }\r\n                }\r\n            ],\r\n            yAxes: [\r\n                { \r\n                   ticks: { fontColor: 'rgb(255,255,255)', fontSize: 14 } ,\r\n                   gridLines: { \r\n                       color: 'rgba(255,255,255, 0.2)',\r\n                       zeroLineColor: 'rgb(255,255,255)'\r\n                    }\r\n                }\r\n            ],\r\n        }\r\n    }\r\n    return (\r\n        dailyData.length &&\r\n        <Line data={{\r\n            labels,\r\n            datasets: [\r\n                {\r\n                    label: 'Przypadki śmiertelne',\r\n                    borderColor: '#4a148c',\r\n                    backgroundColor: 'rgba(74, 20, 140, 0.6)',\r\n                    fill: true,\r\n                    borderWidth: 3,\r\n                    data: dailyData.map(({ deaths }) => deaths.total)\r\n                },\r\n                {\r\n                    label: 'Przypadki zachorowań',\r\n                    borderColor: '#d50000',\r\n                    backgroundColor: 'rgba(255,0,0,0.6)',\r\n                    borderWidth: 3,\r\n                    fill: true,\r\n                    data: dailyData.map(({ confirmed }) => confirmed.total)\r\n                },\r\n            ],\r\n        }} \r\n        options={options}\r\n        />\r\n    );\r\n};\r\n\r\nexport default LineChart;","import React from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport moment from 'moment-timezone';\r\nimport 'moment/locale/pl';\r\n\r\n\r\nconst BarChart = ({ data }) => {\r\n\r\n    const { confirmed, deaths, recovered, lastUpdate  } = data;\r\n    const options = {\r\n        legend: {\r\n            display: false,\r\n        },\r\n        title: {\r\n            display: true,\r\n            text: `Aktualny stan, ${moment(lastUpdate).tz('Europe/Warsaw').format('D MMMM YYYY')} r.`,\r\n            fontColor: 'rgb(255,255,255)',\r\n            fontSize: 18\r\n        },\r\n        tooltips: {\r\n            bodyFontSize: 16,\r\n            xPadding: 15,\r\n            yPadding: 10\r\n        },\r\n        responsive: true,\r\n        scales: {\r\n\t\t    backgroundColor: '#121212',\r\n            xAxes: [\r\n                { \r\n                    ticks: {\r\n                        fontColor: 'rgb(255,255,255)',\r\n                        fontSize: 12,\r\n                    },\r\n                    gridLines: { \r\n                       color: 'rgb(255,255,255, 0.2)',\r\n                       zeroLineColor: 'rgb(255,255,255)'\r\n                    }\r\n                }\r\n            ],\r\n            yAxes: [\r\n                { \r\n                    ticks: {\r\n                        fontColor: 'rgb(255,255,255)',\r\n                        fontSize: 12,\r\n                    },\r\n                    gridLines: { \r\n                       color: 'rgba(255,255,255, 0.2)',\r\n                       zeroLineColor: 'rgb(255,255,255)' \r\n                    }\r\n                }\r\n            ],\r\n        }\r\n    };\r\n    return (\r\n        <Bar\r\n            data= {{\r\n                labels: ['Przypadki zachorowań', 'Przypadki śmiertelne', 'Wyzdrowienia'],\r\n                datasets: [\r\n                    {\r\n                        label: 'Ilość osób',\r\n                        data: [confirmed.value, deaths.value, recovered.value],\r\n                        backgroundColor: ['rgba(255,0,0,0.7)', 'rgba(74, 20, 140, 0.7)', 'rgba(67, 160, 71, 0.7)']\r\n                    }\r\n                ]\r\n            }}\r\n            options={options}\r\n        \r\n        />\r\n    );\r\n};\r\n\r\nexport default BarChart;","import React from 'react';\r\nimport { css } from '@emotion/core';\r\nimport LineChart from './LineChart';\r\nimport BarChart from './BarChart';\r\n\r\nconst chart = css({\r\n    gridArea: 'chart',\r\n    width: '100%',\r\n    marginBottom: 15\r\n});\r\n\r\nconst Chart = ({ data, country }) =>\r\n{\r\n    return (\r\n        <div css={chart}>\r\n            {\r\n                country ? <BarChart data={data} /> : <LineChart />\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Chart;","import React, { useState, useEffect } from 'react';\nimport { Global, css } from '@emotion/core';\nimport axios from 'axios';\nimport Loader from 'react-loader-spinner';\nimport Header from './Header';\nimport Cards from './Cards';\nimport CountriesList from './CountriesList';\nimport Chart from './Chart';\n\nconst container = css({\n\tdisplay: 'grid',\n\tmaxWidth: '100vw',\n\tgridTemplateAreas: ' \"header\" \"cards\" \"countries\" \"chart\"',\n\tgridTemplateRows: '100px auto 70px auto',\n\tgridRowGap: 10,\n\t'@media (min-width: 768px)':{\n\t\tmaxWidth: '80vw',\n\t\tmargin: '0 auto',\n    }\n});\n\nconst loader = css({\n\tdisplay: 'flex',\n\tjustifyContent: 'center'\n});\n\nconst globalStyles = css({\n\t'body':\n\t{\n\t\tbackgroundColor: '#121212',\n\t\tcolor: '#fff',\n\t\tmaxWidth: '100vw',\n\t\tmargin: 0,\n\t\t'@media (min-width: 768px)':{\n\t\t\tmargin: 8,\n\t\t}\n\t},\n});\n\nconst App = () =>\n{\n\tconst [data, setData] = useState({\n\t\tconfirmed: 0, deaths: 0, recovered: 0, lastUpdate: 0\n\t});\n\tconst [country, setCountry] = useState('');\n\tconst [loading, setLoading] = useState(true);\n\n\tconst handleOnChangeCountry = (selectedCountry) => {\n\t\tif (selectedCountry.value === 'świat')\n\t\t\tsetCountry('');\n\t\telse\n\t\t\tsetCountry(selectedCountry.value);\n\t};\n\n\tuseEffect(() => {\n\t\tlet url = 'https://covid19.mathdro.id/api';\n\t\tif (country)\n\t\t\turl += `/countries/${country}`\n\t\tconst fetchData = async (url) => {\n\t\t\tconst { data: { confirmed, deaths, recovered, lastUpdate } } = await axios.get(url);\n\t\t\tsetData({ confirmed, deaths, recovered, lastUpdate });\n\t\t\tsetLoading(false);\n\t\t};\n\t\tfetchData(url);\n\t}, [country, setData])\n\n\treturn (\n\t\t<>\n\t\t\t<Global styles={globalStyles}/>\n\t\t\t<div css={container}>\n\t\t\t\t<Header />\n\t\t\t\t{\n\t\t\t\t\tloading ?\n\t\t\t\t\t\t<div css={loader}> \n\t\t\t\t\t\t\t<Loader type=\"Rings\" color=\"#00BFFF\" height={300} width={300}/> \n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t: ( <>\n\t\t\t\t\t\t\t\t<Cards data={data}/>\n\t\t\t\t\t\t\t\t<CountriesList handleOnChangeCountry={handleOnChangeCountry}/>\n\t\t\t\t\t\t\t\t<Chart data={data} country={country}/>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t\t\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n","module.exports = __webpack_public_path__ + \"static/media/logo.d7265326.png\";"],"sourceRoot":""}